name: Prepare draft release
on:
  push:
    tags: ["*@*.*.*"]
jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        with:
          script: |
            function getPreviousReleaseTagName(packageName) {
              for (let page = 1; ; page++) {
                const releases = await github.rest.repos.listReleases({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 100,
                  page,
                });
                if (releases.data.length === 0) {
                  return null;
                }
                if (releases.status !== 200) {
                  if (releases.status === 400) {
                    return null;
                  }
                  throw new Error(
                    `Failed to get releases: ${releases.status} ${releases.statusText}`
                  );
                }
                for (const release of releases.data) {
                  if (release.name.startsWith(`${packageName}@`)) {
                    return release.tag_name;
                  }
                }
              }
            }
            const tagName = context.ref.replace("refs/tags/", "");
            const [ packageName, tagVersionWithV ] = tagName.split(/-(?=v\d+\.\d+\.\d+)|(?<!^)@/, 2);
            const { version: packageJsonVersion } = require(`./packages/${packageName}/package.json`);
            const tagVersion = tagVersionWithV.replace(/^v/, "");
            if (tagVersion !== packageJsonVersion) {
              throw new Error(
                `Tag name (${tagVersion}) does not match package.json version (${packageJsonVersion})`
              );
            }

            const releaseNotes = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              previous_tag_name: getPreviousReleaseTagName(packageName) ?? undefined,
            });

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `${packageName}@${tagVersion}`,
              draft: true,
              prerelease: tagVersion.includes("-"),
              body: releaseNotes.data.body
            });
