name: Publish Package to npmjs
on:
  release:
    types: [published]
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      # Setup .npmrc file to publish to npm
      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: pnpm/action-setup@v2
        with:
          run_install: true
      - name: Build packages
        run: node --run build
      - name: Determine package from tag
        uses: actions/github-script@v6
        id: determine
        with:
          script: |
            const tagName = context.ref.replace(/refs\/tags\//, "");
            const [packageName, version] = tagName.split(/-(?=v\d+\.\d+\.\d+)|(?<!^)@/, 2);
            
            if (!version) {
              throw new Error(`Could not determine version from tag ${tagName} (should be <package-name>-v<version>)`);
            }
            const isPrerelease = context.payload.release.prerelease;

            if (isPrerelease !== version.includes("-")) {
              throw new Error(`Version ${version} in tag ${tagName} does not match prerelease status`);
            }

            const fs = require("node:fs");
            const packageJson = JSON.parse(fs.readFileSync(`packages/${packageName}/package.json`, "utf8"));
            if (packageJson.name !== packageName) {
              throw new Error(`Package name ${packageName} in tag ${tagName} does not match package name in package.json (${packageJson.name})`);
            }
            if (packageJson.version !== version) {
              throw new Error(`Version ${version} in tag ${tagName} does not match version in package.json (${packageJson.version})`);
            }

            core.setOutput("packageName", packageName);
            core.exportVariable("IS_PRERELEASE", isPrerelease ? "1" : "0");
      # pnpm publish doesn't allow a publish from tag, so --no-git-checks is needed
      - run: |
          if [ "$IS_PRERELEASE" = "1" ]; then
            pnpm publish --provenance --access public --no-git-checks --tag next
          else
            pnpm publish --provenance --access public --no-git-checks
          fi
        working-directory: packages/${{ steps.determine.outputs.packageName }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
